import numpy as np
from iminuit import Minuit, describe, Struct
import matplotlib.pyplot as plt
from math import cos
from math import sin
from math import pi
from math import exp
data = {}
data["AllAngles"] = {}
data["Outplane"] = {}
data["Midplane"] = {}
data["Inplane"] = {}

phi_s = {}
phi_s["Inplane"]  = 0
phi_s["Midplane"] =np.pi/4.0
phi_s["Outplane"] = np.pi/2.0
phi_s["AllAngles"]  = 0
c  = {}
c["Inplane"]  = np.pi/6.0
c["Midplane"] = np.pi/12.0
c["Outplane"] = np.pi/6.0
c["AllAngles"] = 2*np.pi


data["AllAngles"]["Bkg"] = {'y': np.array([ 2.49348541,  2.51939348,  2.69133703,  2.72074525,  2.6787511 ,
        2.57755925,  2.47638564,  2.23209178,  2.30849311,  2.39724754,
        2.63704845,  2.98564584,  2.76388578,  2.56419436,  2.62984143,
        2.2515989 ]), 'x_up': np.array([-0.375, -0.25 , -0.125,  0.   ,  0.125,  0.25 ,  0.375,  0.5  ,
        0.625,  0.75 ,  0.875,  1.   ,  1.125,  1.25 ,  1.375,  1.5  ]), 'x_center': np.array([-0.4375, -0.3125, -0.1875, -0.0625,  0.0625,  0.1875,  0.3125,
        0.4375,  0.5625,  0.6875,  0.8125,  0.9375,  1.0625,  1.1875,
        1.3125,  1.4375]), 'x_low': np.array([-0.5  , -0.375, -0.25 , -0.125,  0.   ,  0.125,  0.25 ,  0.375,
        0.5  ,  0.625,  0.75 ,  0.875,  1.   ,  1.125,  1.25 ,  1.375]), 'dy': np.array([ 0.07338595,  0.07376622,  0.07624187,  0.07665729,  0.07606339,
        0.07461289,  0.07313388,  0.06943294,  0.07061123,  0.07195582,
        0.07546899,  0.08030242,  0.07726264,  0.0744192 ,  0.0753658 ,
        0.06973568])}
data["AllAngles"]["All"] = {'y': np.array([ 2.8031954 ,  2.96674255,  3.12415059,  3.59522141,  3.519653  ,
        3.21192184,  3.01956993,  2.97847338,  2.87088439,  3.03705708,
        3.40486964,  3.34274857,  3.22965536,  3.16859741,  2.89396797,
        2.97370773]), 'x_up': np.array([-0.375, -0.25 , -0.125,  0.   ,  0.125,  0.25 ,  0.375,  0.5  ,
        0.625,  0.75 ,  0.875,  1.   ,  1.125,  1.25 ,  1.375,  1.5  ]), 'x_center': np.array([-0.4375, -0.3125, -0.1875, -0.0625,  0.0625,  0.1875,  0.3125,
        0.4375,  0.5625,  0.6875,  0.8125,  0.9375,  1.0625,  1.1875,
        1.3125,  1.4375]), 'x_low': np.array([-0.5  , -0.375, -0.25 , -0.125,  0.   ,  0.125,  0.25 ,  0.375,
        0.5  ,  0.625,  0.75 ,  0.875,  1.   ,  1.125,  1.25 ,  1.375]), 'dy': np.array([ 0.07781014,  0.08004781,  0.08214393,  0.08811956,  0.08718854,
        0.08328983,  0.08075735,  0.08020591,  0.07874398,  0.08099085,
        0.08575506,  0.08496917,  0.08351944,  0.08272619,  0.07905992,
        0.08014172])}

data["AllAngles"]["Signal"] = {'y': np.array([ 0.33650516,  0.37156954,  0.4481704 ,  0.66905554,  0.70713113,
        0.41552846,  0.44880643,  0.43225212,  0.38653405,  0.41708407,
        0.42218978,  0.47816823,  0.47857266,  0.45063732,  0.40197039,
        0.41305294]), 'x_up': np.array([-0.375, -0.25 , -0.125,  0.   ,  0.125,  0.25 ,  0.375,  0.5  ,
        0.625,  0.75 ,  0.875,  1.   ,  1.125,  1.25 ,  1.375,  1.5  ]), 'x_center': np.array([-0.4375, -0.3125, -0.1875, -0.0625,  0.0625,  0.1875,  0.3125,
        0.4375,  0.5625,  0.6875,  0.8125,  0.9375,  1.0625,  1.1875,
        1.3125,  1.4375]), 'x_low': np.array([-0.5  , -0.375, -0.25 , -0.125,  0.   ,  0.125,  0.25 ,  0.375,
        0.5  ,  0.625,  0.75 ,  0.875,  1.   ,  1.125,  1.25 ,  1.375]), 'dy': np.array([ 0.0269591 ,  0.02832889,  0.03111223,  0.03801374,  0.03908044,
        0.0299578 ,  0.0311343 ,  0.0305547 ,  0.02889371,  0.03001382,
        0.03019697,  0.0321366 ,  0.03215018,  0.03119774,  0.02946501,
        0.02986843])}

		
data["Outplane"]["Bkg"]  = {'y': np.array([ 3.33829944,  2.51994497,  2.43263362,  2.02054064,  2.22357889,
        2.19144689,  2.80724456,  3.12138936,  3.34343557,  2.46109088,
        2.16118703,  2.03286816,  1.69819935,  2.09972843,  2.89266576,
        2.93715599]), 'x_up': np.array([-0.375, -0.25 , -0.125,  0.   ,  0.125,  0.25 ,  0.375,  0.5  ,
        0.625,  0.75 ,  0.875,  1.   ,  1.125,  1.25 ,  1.375,  1.5  ]), 'x_center': np.array([-0.4375, -0.3125, -0.1875, -0.0625,  0.0625,  0.1875,  0.3125,
        0.4375,  0.5625,  0.6875,  0.8125,  0.9375,  1.0625,  1.1875,
        1.3125,  1.4375]), 'x_low': np.array([-0.5  , -0.375, -0.25 , -0.125,  0.   ,  0.125,  0.25 ,  0.375,
        0.5  ,  0.625,  0.75 ,  0.875,  1.   ,  1.125,  1.25 ,  1.375]), 'dy': np.array([ 0.16679077,  0.14491219,  0.14237959,  0.1297607 ,  0.1361243 ,
        0.13513718,  0.15295001,  0.16128105,  0.16691903,  0.14320995,
        0.13420094,  0.13015594,  0.11896076,  0.13227901,  0.15525961,
        0.15644903])}
		
data["Outplane"]["All"]  = {'y': np.array([ 3.82174924,  3.45085019,  2.73836034,  2.77802963,  2.87674229,
        3.00198745,  3.41587387,  4.25696933,  3.95893635,  3.29994733,
        2.87814759,  2.58067786,  2.63394865,  2.89687706,  3.37978483,
        4.02981509]), 'x_up': np.array([-0.375, -0.25 , -0.125,  0.   ,  0.125,  0.25 ,  0.375,  0.5  ,
        0.625,  0.75 ,  0.875,  1.   ,  1.125,  1.25 ,  1.375,  1.5  ]), 'x_center': np.array([-0.4375, -0.3125, -0.1875, -0.0625,  0.0625,  0.1875,  0.3125,
        0.4375,  0.5625,  0.6875,  0.8125,  0.9375,  1.0625,  1.1875,
        1.3125,  1.4375]), 'x_low': np.array([-0.5  , -0.375, -0.25 , -0.125,  0.   ,  0.125,  0.25 ,  0.375,
        0.5  ,  0.625,  0.75 ,  0.875,  1.   ,  1.125,  1.25 ,  1.375]), 'dy': np.array([ 0.17845983,  0.16957914,  0.15106181,  0.15215205,  0.15483169,
        0.15816625,  0.16871756,  0.1883474 ,  0.18163462,  0.16582992,
        0.1548695 ,  0.14664804,  0.14815388,  0.15537259,  0.16782394,
        0.18325336])}

data["Outplane"]["Signal"] = {'y': np.array([ 0.40976277,  0.47485133,  0.49857913,  0.739873  ,  0.86583295,
        0.51817222,  0.51874003,  0.58883766,  0.48137405,  0.54512786,
        0.47773038,  0.51156349,  0.69425187,  0.57148903,  0.48565656,
        0.49356693]), 'x_up': np.array([-0.375, -0.25 , -0.125,  0.   ,  0.125,  0.25 ,  0.375,  0.5  ,
        0.625,  0.75 ,  0.875,  1.   ,  1.125,  1.25 ,  1.375,  1.5  ]), 'x_center': np.array([-0.4375, -0.3125, -0.1875, -0.0625,  0.0625,  0.1875,  0.3125,
        0.4375,  0.5625,  0.6875,  0.8125,  0.9375,  1.0625,  1.1875,
        1.3125,  1.4375]), 'x_low': np.array([-0.5  , -0.375, -0.25 , -0.125,  0.   ,  0.125,  0.25 ,  0.375,
        0.5  ,  0.625,  0.75 ,  0.875,  1.   ,  1.125,  1.25 ,  1.375]), 'dy': np.array([ 0.05843535,  0.06290544,  0.06445794,  0.07852139,  0.08494277,
        0.06571227,  0.06574826,  0.07004984,  0.06333601,  0.06739979,
        0.06309585,  0.06529188,  0.07606203,  0.06901021,  0.06361712,
        0.06413312])}
		
data["Midplane"]["Bkg"]  = 	{'y': np.array([ 2.66078503,  2.78597652,  2.58053976,  2.35438723,  2.38757541,
        2.8857209 ,  2.36820957,  2.22426847,  2.34129424,  2.70480232,
        2.6216922 ,  2.48233415,  2.37455386,  2.45062596,  2.41384271,
        2.13481617]), 'x_up': np.array([-0.375, -0.25 , -0.125,  0.   ,  0.125,  0.25 ,  0.375,  0.5  ,
        0.625,  0.75 ,  0.875,  1.   ,  1.125,  1.25 ,  1.375,  1.5  ]), 'x_center': np.array([-0.4375, -0.3125, -0.1875, -0.0625,  0.0625,  0.1875,  0.3125,
        0.4375,  0.5625,  0.6875,  0.8125,  0.9375,  1.0625,  1.1875,
        1.3125,  1.4375]), 'x_low': np.array([-0.5  , -0.375, -0.25 , -0.125,  0.   ,  0.125,  0.25 ,  0.375,
        0.5  ,  0.625,  0.75 ,  0.875,  1.   ,  1.125,  1.25 ,  1.375]), 'dy': np.array([ 0.14361839,  0.14695822,  0.14143615,  0.1350965 ,  0.13604535,
        0.1495658 ,  0.13549249,  0.13131029,  0.13472033,  0.14480145,
        0.14255945,  0.13871878,  0.13567385,  0.13782997,  0.13679166,
        0.12864277])}
		
		
data["Midplane"]["All"]  = {'y': np.array([ 2.66987375,  3.08160679,  3.1135146 ,  3.3046259 ,  2.90703401,
        3.04284746,  3.07656997,  2.95379877,  2.86744912,  3.1494575 ,
        3.58875936,  3.0564914 ,  2.86344066,  2.89407555,  2.84008775,
        2.81208219]), 'x_up': np.array([-0.375, -0.25 , -0.125,  0.   ,  0.125,  0.25 ,  0.375,  0.5  ,
        0.625,  0.75 ,  0.875,  1.   ,  1.125,  1.25 ,  1.375,  1.5  ]), 'x_center': np.array([-0.4375, -0.3125, -0.1875, -0.0625,  0.0625,  0.1875,  0.3125,
        0.4375,  0.5625,  0.6875,  0.8125,  0.9375,  1.0625,  1.1875,
        1.3125,  1.4375]), 'x_low': np.array([-0.5  , -0.375, -0.25 , -0.125,  0.   ,  0.125,  0.25 ,  0.375,
        0.5  ,  0.625,  0.75 ,  0.875,  1.   ,  1.125,  1.25 ,  1.375]), 'dy': np.array([ 0.14386346,  0.15455881,  0.15535692,  0.16005391,  0.15011711,
        0.15358374,  0.15443244,  0.15131974,  0.14909154,  0.15625108,
        0.16679281,  0.15392768,  0.1489873 ,  0.14978216,  0.14837852,
        0.14764514])}

data["Midplane"]["Signal"] = {'y': np.array([ 0.34437059,  0.38480986,  0.50878835,  0.68166107,  0.78333148,
        0.35897453,  0.46852209,  0.42169355,  0.3972801 ,  0.36136534,
        0.43848115,  0.55571705,  0.39287956,  0.41442404,  0.42887208,
        0.46275159]), 'x_up': np.array([-0.375, -0.25 , -0.125,  0.   ,  0.125,  0.25 ,  0.375,  0.5  ,
        0.625,  0.75 ,  0.875,  1.   ,  1.125,  1.25 ,  1.375,  1.5  ]), 'x_center': np.array([-0.4375, -0.3125, -0.1875, -0.0625,  0.0625,  0.1875,  0.3125,
        0.4375,  0.5625,  0.6875,  0.8125,  0.9375,  1.0625,  1.1875,
        1.3125,  1.4375]), 'x_low': np.array([-0.5  , -0.375, -0.25 , -0.125,  0.   ,  0.125,  0.25 ,  0.375,
        0.5  ,  0.625,  0.75 ,  0.875,  1.   ,  1.125,  1.25 ,  1.375]), 'dy': np.array([ 0.05166759,  0.05461705,  0.06280204,  0.07269246,  0.0779252 ,
        0.05275176,  0.0602657 ,  0.05717466,  0.05549496,  0.05292714,
        0.05830162,  0.06563447,  0.05518676,  0.05667971,  0.05765926,
        0.05989342])}

data["Inplane"]["Bkg"]  ={'y': np.array([ 1.91890908,  2.35838698,  2.90319337,  3.33422534,  3.10950965,
        2.60830986,  2.35606621,  1.73813615,  1.7083789 ,  2.17605237,
        2.91314342,  3.82331187,  3.59615769,  2.893102  ,  2.61266814,
        1.93757143]), 'x_up': np.array([-0.375, -0.25 , -0.125,  0.   ,  0.125,  0.25 ,  0.375,  0.5  ,
        0.625,  0.75 ,  0.875,  1.   ,  1.125,  1.25 ,  1.375,  1.5  ]), 'x_center': np.array([-0.4375, -0.3125, -0.1875, -0.0625,  0.0625,  0.1875,  0.3125,
        0.4375,  0.5625,  0.6875,  0.8125,  0.9375,  1.0625,  1.1875,
        1.3125,  1.4375]), 'x_low': np.array([-0.5  , -0.375, -0.25 , -0.125,  0.   ,  0.125,  0.25 ,  0.375,
        0.5  ,  0.625,  0.75 ,  0.875,  1.   ,  1.125,  1.25 ,  1.375]), 'dy': np.array([ 0.09469353,  0.10497857,  0.11647456,  0.12482184,  0.12054219,
        0.11040092,  0.1049269 ,  0.09012287,  0.08934808,  0.10083883,
        0.11667399,  0.13366355,  0.12963208,  0.11627196,  0.11049312,
        0.09515289])}
		
data["Inplane"]["All"]  = {'y': np.array([ 2.3124105 ,  2.62603973,  3.34689299,  4.22863186,  4.2494527 ,
        3.43156073,  2.76298358,  2.27643372,  2.2628326 ,  2.82188659,
        3.58937839,  3.94263484,  3.78445209,  3.48644676,  2.6540265 ,
        2.47892648]), 'x_up': np.array([-0.375, -0.25 , -0.125,  0.   ,  0.125,  0.25 ,  0.375,  0.5  ,
        0.625,  0.75 ,  0.875,  1.   ,  1.125,  1.25 ,  1.375,  1.5  ]), 'x_center': np.array([-0.4375, -0.3125, -0.1875, -0.0625,  0.0625,  0.1875,  0.3125,
        0.4375,  0.5625,  0.6875,  0.8125,  0.9375,  1.0625,  1.1875,
        1.3125,  1.4375]), 'x_low': np.array([-0.5  , -0.375, -0.25 , -0.125,  0.   ,  0.125,  0.25 ,  0.375,
        0.5  ,  0.625,  0.75 ,  0.875,  1.   ,  1.125,  1.25 ,  1.375]), 'dy': np.array([ 0.10395026,  0.11077551,  0.12505873,  0.14057013,  0.14091577,
        0.12663069,  0.11362719,  0.10313845,  0.10282988,  0.11483199,
        0.12950983,  0.13573329,  0.13298254,  0.12763936,  0.11136424,
        0.10762792])}
		
data["Inplane"]["Signal"] = {'y': np.array([ 0.29068482,  0.3056732 ,  0.3833631 ,  0.62174616,  0.57220559,
        0.39206214,  0.39770666,  0.35081188,  0.32687498,  0.37887129,
        0.38122502,  0.4126952 ,  0.40928717,  0.4046995 ,  0.33882713,
        0.33794637]), 'x_up': np.array([-0.375, -0.25 , -0.125,  0.   ,  0.125,  0.25 ,  0.375,  0.5  ,
        0.625,  0.75 ,  0.875,  1.   ,  1.125,  1.25 ,  1.375,  1.5  ]), 'x_center': np.array([-0.4375, -0.3125, -0.1875, -0.0625,  0.0625,  0.1875,  0.3125,
        0.4375,  0.5625,  0.6875,  0.8125,  0.9375,  1.0625,  1.1875,
        1.3125,  1.4375]), 'x_low': np.array([-0.5  , -0.375, -0.25 , -0.125,  0.   ,  0.125,  0.25 ,  0.375,
        0.5  ,  0.625,  0.75 ,  0.875,  1.   ,  1.125,  1.25 ,  1.375]), 'dy': np.array([ 0.03685567,  0.03779391,  0.04232513,  0.05390135,  0.05170936,
        0.04280264,  0.04310965,  0.04048837,  0.03908265,  0.04207644,
        0.04220693,  0.04391449,  0.04373279,  0.043487  ,  0.03979076,
        0.03973901])}

def TotalPDF(x, params, phi,c):
    return Signal(x,params) + Background(x,params, phi, c)


def Signal(x, params):

    A1 = params["A1"]
    A2 = params["A2"]
    s1 = params["s1"]
    s2 = params["s2"]
    C1 = params["C1"]
    return A1*np.exp(-(x-0.0)**2/(2*s1**2) ) + A2*np.exp(-(x-1.0)**2/(2*s2**2) ) + C1 

def Background(x, params, phi , c ):
    B    = params["B"]
    v2_t = params["v2_t"]
    v2_a = params["v2_a"]
    V3   = params["V3"]
    v4_t = params["v4_t"]
    v4_a = params["v4_a"]
    num = v2_t + cos(2*phi)*sin(2*c)/(2*c) +  v4_t*cos(2*phi)*sin(2*c)/(2*c) +  v2_t*cos(4*phi)*sin(4*c)/(4*c) + v4_t*cos(6*phi)*sin(6*c)/(6*c)
    den =  1 + 2*v2_t*cos(2*phi)*sin(2*c)/(2*c) + 2*v4_t*cos(4*phi)*sin(4*c)/(4*c) 
    v2R = num/den
    num2 = v4_t + cos(4*phi)*sin(4*c)/(4*c) + v2_t*cos(2*phi)*sin(2*c)/(2*c)+ v2_t*cos(6*phi)*sin(6*c)/(6*c) + v4_t*cos(8*phi)*sin(8*c)/(8*c) 
    v4R = num2/den
    BR = B*den*c*2/np.pi
    return B*(1 + 2*v2R*v2_a*np.cos(2*np.pi*x) + 2*V3*np.cos(3*np.pi*x) + 2*v4R*v4_a*np.cos(4*np.pi*x))



def Chi2(A1,A2,s1,s2,C1, B, v2_t, v2_a, V3, v4_t, v4_a):
    params = {}
    params = {}
    params["A1"] = A1
    params["A2"] = A2
    params["s1"] = s1
    params["s2"] = s2
    params["C1"] = C1
    params["B"] = B
    params["v2_t"] = v2_t
    params["v2_a"] = v2_a
    params["V3"]   = V3
    params["v4_t"] = v4_t
    params["v4_a"] = v4_a
    
    return Chi2_All(params) + Chi2_BKG(params) 

def Chi2_All(params):
    #asdasd
    x = data["AllAngles"]["All"]["x_center"]
    y = data["AllAngles"]["All"]["y"]
    #print x, y
    total_chi2 = np.sum( np.power( y - Signal( x , params ) - Background( x , params, phi_s["AllAngles"], c["AllAngles"] ) , 2.0))
    return total_chi2

def Chi2_BKG(params):
    total_chi2 = 0
    ### BACKGROUND ONLY
    for key in data.keys():
        x = data[key]["Bkg"]["x_center"]
	y = data[key]["Bkg"]["y"]
	#print x, y 
        total_chi2 = total_chi2+ np.sum( np.power( y - Background( x , params, phi_s[key], c[key] )  , 2.0))
    return total_chi2


def PerformFitTotal():
    print ' About to start MINUIT'
    m = Minuit(Chi2, s1=0.1, limit_s1=(0.01,0.5), s2=0.1, limit_s2=(0.01,0.5),
               A1 =0.35, limit_A1=(0.1,1.0), A2=0.01, limit_A2=(0.01, 0.3),
               v2_t=0.20, limit_v2_t =(0,0.50), error_v2_t=0.01, v2_a=0.10, limit_v2_a =(0,0.50), error_v2_a=0.01,
               v4_t=0.05, limit_v4_t =(0,0.10), error_v4_t=0.01, v4_a=0.05, limit_v4_a =(0,0.10), error_v4_a=0.01,
               V3=0 , limit_V3 = (0, 0.1), error_V3 =0.01,
               B=2.0 , limit_B = (0.1, 10.0), error_B = 0.01)
    m.migrad()
    f, axes = plt.subplots(1,4, sharex=True, sharey=True)

    for j, key in enumerate(data.keys()):
        x = data[key]["Bkg"]["x_center"]#
        y = data[key]["Bkg"]["y"]
        dy = data[key]["Bkg"]["dy"]
        axes[j].errorbar(x,y,yerr=dy, fmt='o')
        xfit = np.linspace(-0.5, 1.5, num=50, endpoint=True)
        model = Background(xfit, m.values, phi_s[key], c[key])
        axes[j].plot(xfit, model,'-r') ##plot fit function
        x = data[key]["All"]["x_center"]
        y = data[key]["All"]["y"]
        dy = data[key]["All"]["dy"]
        axes[j].errorbar(x,y,yerr=dy, fmt='o')
    xfit = np.linspace(-0.5, 1.5, num=50, endpoint=True)
    model = TotalPDF(xfit, m.values, phi_s["AllAngles"], c["AllAngles"])
    modelSignal = Signal(xfit, m.values)
    axes[0].plot(xfit, model,'-g') ##plot fit function
    axes[0].plot(xfit, modelSignal, '-g')
    plt.show()

def PerformFitToSignal():
    print ' About to start MINUIT' 
    m = Minuit(Chi2_Signal, s1=0.1, limit_s1=(0.01,1), s2=0.1, limit_s2=(0.01,1))
    m.migrad()
    f, axes = plt.subplots(1,4, sharex=True, sharey=True)
    for j, key in enumerate(data.keys()):
        x = data[key]["Signal"]["x_center"]#
        y = data[key]["Signal"]["y"]
        dy = data[key]["Signal"]["dy"]
        axes[j].errorbar(x,y,yerr=dy, fmt='o')
        xfit = np.linspace(-0.5, 1.5, num=50, endpoint=True)
        model = Signal(xfit, m.values)
        axes[j].plot(xfit, model,'-r') ##plot fit function
    plt.show()

def PerformFitToBKG():

    print 'About to start MINUIT ' 

    stepSigma = 0.01
    m = Minuit(Chi2_BKG, v2_t=0.20, limit_v2_t =(0,0.50), error_v2_t=0.01, v2_a=0.10, limit_v2_a =(0,0.50), error_v2_a=0.01,
				  v4_t=0.05, limit_v4_t =(0,0.10), error_v4_t=0.01, v4_a=0.05, limit_v4_a =(0,0.10), error_v4_a=0.01,
				  V3=0 , limit_V3 = (0, 0.1), error_V3 =0.01,
                                  B=2.0 , limit_B = (0.1, 10.0), error_B = 0.01 
                                   )
    m.migrad()
    print ' Describe ' , describe(m)
    #m.minos()

    #print ' values'
    #print(m.values)  # {'x': 2,'y': 3,'z': 4}
    #print ' errors'
    #print(m.errors)  # {'x': 1,'y': 1,'z': 1}

    #print('covariance', m.covariance)
    #print('matrix()', m.matrix()) #covariance
    #print('matrix(correlation=True)', m.matrix(correlation=True)) #correlation
    #m.print_matrix() #correlation
    axes = {}
	
    f, (axes["Inplane"], axes["Midplane"], axes["Outplane"], axes["AllAngles"]) = plt.subplots(1,4, sharex=True, sharey=True)
	
    for key in data.keys():
        x = data[key]["Bkg"]["x_center"]#
    	y = data[key]["Bkg"]["y"]
   	dy = data[key]["Bkg"]["dy"]
  	axes[key].errorbar(x,y,yerr=dy, fmt='o')
	xfit = np.linspace(-0.5, 1.5, num=50, endpoint=True)
	model = Background(xfit, m.values, phi_s[key], c[key])
	axes[key].plot(xfit, model,'-r') ##plot fit function
        x = data[key]["All"]["x_center"]
        y = data[key]["All"]["y"]
        dy = data[key]["All"]["dy"]
        axes[key].errorbar(x,y,yerr=dy, fmt='o')
    plt.show()

print 'ola mundo'
#PerformFitToSignal()
PerformFitTotal()
#PerformFitToBKG()
